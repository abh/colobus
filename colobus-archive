#!/usr/bin/perl -w
use strict;

use DBI ();
use Mail::Address ();
use Digest::MD5 qw(md5_hex);
use Symbol qw(gensym);
use Getopt::Long;
use File::Path qw(mkpath);

use Data::Dumper;

use Colobus qw(%config %feeds %groups get_group_max open_article read_config);

my $TRACE = -t || $ENV{TRACE};

my $group;

$| = 1;

my $config = "config";
my $all;
GetOptions(
  "a|all!" => \$all,
  "c|config=s"   => \$config,
  "d|debug!"   => \$TRACE,
);

read_config($config);

@ARGV = sort keys %groups if $all;

die "usage: $0 [-a] [-c config] group ...\n" unless @ARGV;

# these are the headers we track for the overview database
my (@overview) = qw(Subject From Date Message-ID References In-Reply-To Lines);
my (%overview); @overview{@overview} = ('') x @overview;

my $dsn = $config{'dsn'} || "DBI:mysql:database=colobus;host=localhost";
my $dbh = DBI->connect($dsn, $config{'dbuser'}, $config{'dbpass'}, { PrintError => 1 })
  or die($DBI::errstr);

if (grep { !$groups{$_}->{num} } keys %groups) {
  my $db_groups = $dbh->selectall_hashref(q[select name,id from groups], 'name' );
  my $maxid = 0;
  while (my ($name, $data) = each %$db_groups) {
    my $id = $data->{id};
    $groups{$name}->{num} = $id unless $groups{$name}->{num};
    $maxid = $id if $id > $maxid;
    warn "group num in groups table and config file differs for $name\n"
      unless $groups{$name}->{num} == $id;
  }

  $_ > $maxid and $maxid = $_ for map { $_->{num} } values %groups;

  while (my ($name, $id) = each %groups) {
      next if ($db_groups->{$name});
      my $id = ($groups{$name}->{num}) || ++$maxid;
      $dbh->do(q[insert into groups (name, id) values (?,?)], undef, $name, $id);
  }
}

my $ins_header = $dbh->prepare(<<QUERY);
INSERT INTO articles SET 
  group_id = ?,
  id = ?,
  msgid = ?,
  subjhash = ?,
  fromhash = ?,
  thread_id = ?,
  parent = ?,
  received = FROM_UNIXTIME(?),
  h_date = ?,
  h_messageid = ?,
  h_from = ?,
  h_subject = ?,
  h_references = ?,
  h_lines = ?
QUERY

  my %feed_fh;
  my $timestamp = time;
  for my $feed (keys %feeds) {
    mkpath "feeds/$feed" unless -e "feeds/$feed";
    open (my $fh, ">feeds/$feed/$timestamp.$$.tmp")
	or die "Could not open spool file for feed $feed: $!";
    $feed_fh{$feed} = $fh;
  }

for $group (@ARGV) {
  next unless $groups{$group}->{'num'};
  my $grp = $groups{$group}->{'num'};

  print "$group: " if $TRACE;

  my ($indexed) = $dbh->selectrow_array("SELECT MAX(id) FROM articles WHERE group_id = ?", undef, $grp) || 0;

  open NUM, '<', $groups{$group}->{'path'}."/num"
    or die "unable to open num file: $!";
  my ($latest) = (split ':', scalar <NUM>)[0];
  close NUM;

  for my $num ($indexed + 1 .. $latest) {
    print "." if $TRACE and not $num % 100;
    my $xover = get_article_xover_from_file($group, $num) or next;
    my $ref = $xover->{'References'} || '';
    my (@parents) = $ref =~ m/<(.+?)>/m;
    $xover->{'In-Reply-To'} && $xover->{'In-Reply-To'} =~ m/<(.+?)>/ && push @parents, $1;

    my $parent;
    while (my $parent_msg = pop(@parents)) {
      $parent = $dbh->selectrow_hashref("SELECT id,thread_id FROM articles WHERE msgid = ?", undef, md5_hex($parent_msg));
      last if $parent;
    }

    my $subj_hash = md5_hex(clean_subject($xover->{'Subject'} || ''));

    # if no parent, but subject starts with 'Re:', try to find the parent/thread
    if (!$parent && $xover->{'Subject'} && $xover->{'Subject'} =~ m/^(Re|An|Antwort|Aw)(\^\d+|\[\d+\]|\(\d+\))?:\s*/i) {
      $parent = $dbh->selectrow_hashref("SELECT thread_id FROM articles WHERE subjhash = ? AND received BETWEEN FROM_UNIXTIME(?) - INTERVAL 14 DAY AND FROM_UNIXTIME(?) ORDER BY received DESC LIMIT 1", undef, $subj_hash, $xover->{'mtime'}, $xover->{'mtime'});
    }

    # if no parent, try grouping the message with other very recent messages with the same subject
    if (!$parent && $xover->{'Subject'}) {
      $parent = $dbh->selectrow_hashref("SELECT thread_id FROM articles WHERE subjhash = ? AND received BETWEEN FROM_UNIXTIME(?) - INTERVAL 3 DAY AND FROM_UNIXTIME(?) ORDER BY received DESC LIMIT 1", undef, $subj_hash, $xover->{'mtime'}, $xover->{'mtime'});
    }

    my ($message_id) = md5_hex($xover->{'Message-ID'} =~ m/<(.+?)>/);
    my ($from_hash) = md5_hex($xover->{'From'});

    $ins_header->execute(
      $grp,
      $num,
      $message_id,
      $subj_hash,
      $from_hash,
      $parent->{'thread_id'} || $num,
      $parent->{'id'} || 0,
      $xover->{'mtime'},
      $xover->{'Date'} || "",
      $xover->{'Message-ID'} || "",
      $xover->{'From'} || "",
      $xover->{'Subject'} || "",
      $xover->{'References'} || "",
      $xover->{'Lines'} || 0,
    ) or die "failed to insert into overview: $DBI::errstr";

    for my $feed (keys %feeds) {
	my $fh = $feed_fh{$feed};
	local $| = 1;
	print $fh "$group/$num\n" or die "could not print to fh for $feed: $!";
    }

  }

  print " done.\n" if $TRACE;
}

for my $feed (keys %feeds) {
  close $feed_fh{$feed} or die "could not close spool file for feed $feed: $!";
  rename "feeds/$feed/$timestamp.$$.tmp", "feeds/$feed/$timestamp.$$"
    or die "could not rename spool file for feed $feed: $!";
}

sub clean_subject {
  my $subj = shift;
  my $i;
  while ($subj =~ s/^(Re|An|Antwort|Aw)(\^\d+|\[\d+\]|\(\d+\))?:\s*//i) { last if $i++ > 5 };
  $subj =~ s/\s//g;
  return lc $subj;
}


sub get_article_xover_from_file {
  my ($group,$artno) = @_;
  return unless exists $groups{$group};
  my $article = open_article($group,$artno)
    or return;
  my (%xover);
  $xover{'mtime'} = (stat $article)[9];
  my $body  = 0;
  my $lines = 0;
  my $lastheader;
LINE:
  while (my $line = <$article>) {
    $body = 1 unless $body or $line =~ /\S/;
    last if $body and $xover{Lines};
    $lines++ if $body;
    unless ($body) {
      if ($lastheader && ($line =~ m/^\s+(.+?)\r?\n/is)) {
	($xover{$lastheader} .= $1) =~ s/\s/ /g;
	next;
      }
      foreach my $header (keys %overview) {
	if ($line =~ m/^$header: (.+?)\r?\n/is) {
	  ($xover{$lastheader = $header} = $1) =~ s/\s/ /g;
          next LINE;
	}
      }
      undef $lastheader;
    }
  }

  if (!$xover{'References'} && $xover{'In-Reply-To'}) {
    ($xover{'References'}) = ($xover{'In-Reply-To'} =~ m/(<.+?>)/);
  }

  $xover{'Lines'} ||= $lines;

  # make sure we have a message-id
  $xover{'Message-ID'} ||= "<$group-$artno\@$config{servername}>";

  # fix the From header
  my ($from) = Mail::Address->parse($xover{'From'});
  if ($from) {
    $xover{From} = $from->address;
    my $phrase = $from->phrase || $from->comment;
    $xover{From} .= " (".$phrase.")" if $phrase;
  }
  else {
    $xover{From} = "bogus\@$config{servername} (Unknown Sender)";
  }
  return \%xover;
}
